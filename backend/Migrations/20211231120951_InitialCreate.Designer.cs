// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Models.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(QLTTNNContext))]
    [Migration("20211231120951_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Candidate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("identification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("issue_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("issue_place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("place_of_birth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("candidates");
                });

            modelBuilder.Entity("backend.Models.CandidateRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("candidate_id")
                        .HasColumnType("integer");

                    b.Property<string>("candidate_no")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("room_id")
                        .HasColumnType("integer");

                    b.Property<float>("score_listening")
                        .HasColumnType("real");

                    b.Property<float>("score_reading")
                        .HasColumnType("real");

                    b.Property<float>("score_speaking")
                        .HasColumnType("real");

                    b.Property<float>("score_writing")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("candidate_id");

                    b.HasIndex("room_id");

                    b.ToTable("candidate_rooms");
                });

            modelBuilder.Entity("backend.Models.Examination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("examinations");
                });

            modelBuilder.Entity("backend.Models.RegistrationForm", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("candidate_id")
                        .HasColumnType("integer");

                    b.Property<int>("examination_id")
                        .HasColumnType("integer");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("candidate_id");

                    b.HasIndex("examination_id");

                    b.ToTable("registration_forms");
                });

            modelBuilder.Entity("backend.Models.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("examination_id")
                        .HasColumnType("integer");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("time")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("examination_id");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("backend.Models.Supervisor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("supervisors");
                });

            modelBuilder.Entity("backend.Models.SupervisorRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("room_id")
                        .HasColumnType("integer");

                    b.Property<int>("supervisor_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("room_id");

                    b.HasIndex("supervisor_id");

                    b.ToTable("supervisor_rooms");
                });

            modelBuilder.Entity("backend.Models.CandidateRoom", b =>
                {
                    b.HasOne("backend.Models.Candidate", "candidate")
                        .WithMany("candidateRooms")
                        .HasForeignKey("candidate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Room", "room")
                        .WithMany("candidateRooms")
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("candidate");

                    b.Navigation("room");
                });

            modelBuilder.Entity("backend.Models.RegistrationForm", b =>
                {
                    b.HasOne("backend.Models.Candidate", "candidate")
                        .WithMany("registrationForms")
                        .HasForeignKey("candidate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Examination", "examination")
                        .WithMany("registrationForms")
                        .HasForeignKey("examination_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("candidate");

                    b.Navigation("examination");
                });

            modelBuilder.Entity("backend.Models.Room", b =>
                {
                    b.HasOne("backend.Models.Examination", "Examination")
                        .WithMany("rooms")
                        .HasForeignKey("examination_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("backend.Models.SupervisorRoom", b =>
                {
                    b.HasOne("backend.Models.Room", "room")
                        .WithMany("supervisorRooms")
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Supervisor", "supervisor")
                        .WithMany("supervisorRooms")
                        .HasForeignKey("supervisor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("room");

                    b.Navigation("supervisor");
                });

            modelBuilder.Entity("backend.Models.Candidate", b =>
                {
                    b.Navigation("candidateRooms");

                    b.Navigation("registrationForms");
                });

            modelBuilder.Entity("backend.Models.Examination", b =>
                {
                    b.Navigation("registrationForms");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("backend.Models.Room", b =>
                {
                    b.Navigation("candidateRooms");

                    b.Navigation("supervisorRooms");
                });

            modelBuilder.Entity("backend.Models.Supervisor", b =>
                {
                    b.Navigation("supervisorRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
